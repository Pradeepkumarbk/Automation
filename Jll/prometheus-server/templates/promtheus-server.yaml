apiVersion: v1
kind: Service
metadata:
  name: prometheus-hs
  labels:
    app: {{ .Values.appname}}
spec:
  ports:
  - port: {{ .Values.container.unsecureport }}
    name: server
  clusterIP: None
  selector:
    app: {{ .Values.appname}}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  annotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
  labels:
    app: {{ .Values.appname}}
spec:
  type: LoadBalancer
  selector:
    statefulset.kubernetes.io/pod-name: prometheus-0
  ports:
  - port: {{ .Values.container.unsecureport }}
    targetPort: {{ .Values.container.unsecureport }}
    name: server
  selector:
    app: {{ .Values.appname}}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: prometheus-pdb
spec:
  selector:
    matchLabels:
       app: {{ .Values.appname}}
  maxUnavailable: 0
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      app: {{ .Values.appname}}
  serviceName: prometheus-hs
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.appname}}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - prometheus
              topologyKey: "kubernetes.io/hostname"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                   matchExpressions:
                     - key: "app"
                       operator: In
                       values:
                       - prometheus
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 300
      containers:
      - name: prometheus
        imagePullPolicy: Always
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.external-url=/prometheus"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
        ports:
        - containerPort: {{ .Values.container.unsecureport }}
          name: server
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: datadir
          mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: {{ .Values.configFileName }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      imagePullSecrets:	
      - name: jlldataplatform
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus-ingress
  annotations:
    ingress.kubernetes.io/proxy-body-size: 100m
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: dp-devops.jll.com
    http:
      paths:
      - path: /prometheus
        backend:
          serviceName: prometheus-service
          servicePort: {{ .Values.container.unsecureport }}
